<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Accessibility_ClassDescription" xml:space="preserve">
    <value>The CAccPropServicesClass and all of its exposed members are part of a managed wrapper for the Component Object Model (COM) IAccPropServices interface.</value>
  </data>
  <data name="asdf" xml:space="preserve">
    <value />
  </data>
  <data name="Microsoft.Activities.Build.Debugger_ClassDescription" xml:space="preserve">
    <value>Build Extension for Workflow debugger support.</value>
  </data>
  <data name="Microsoft.Activities.Build.Expressions_ClassDescription" xml:space="preserve">
    <value>Specifies information about the expressions build extension.</value>
  </data>
  <data name="Microsoft.Activities.Build.Validation_ClassDescription" xml:space="preserve">
    <value>Represents a task for deferring validation.^Represents a task that reports any deferred validation errors.</value>
  </data>
  <data name="Microsoft.Activities.Build_ClassDescription" xml:space="preserve">
    <value>Specifies information about the workflow build message task.</value>
  </data>
  <data name="Microsoft.Build.BuildEngine_ClassDescription" xml:space="preserve">
    <value>Represents a single item in an MSBuild project.^Represents a collection of BuildItem objects.^Represents a collection of BuildItemGroup objects.^Represents a single property in an MSBuild project.^Represents a collection of BuildProperty objects.^Represents a collection of BuildPropertyGroup objects.^Represents a Task element in a project.^Represents the ConfigurableForwardingLogger, a pre-fabricated forwarding logger to be used when building projects on a multi-proc or multi-core system. For more information, see Writing Multi-Processor-Aware Loggers.^Implements the standard console logger that outputs event data to the console window during a build.^Represents a text file that contains the build log for a build node.^Represents the MSBuild engine.^Extends the ConsoleLogger to log messages to a file rather than the console window.^Represents a single Import element in an MSBuild project.^Represents a collection of all Import elements in a project.^This exception is used to wrap an unhandled exception from a logger.^This exception is thrown whenever there is a problem with the user's XML project file. The problem might be semantic or syntactical. If the problem is in the syntax, it can typically be caught by XSD validation.^This exception is thrown whenever there is a problem with the user's custom toolset definition file. The problem might be semantic or syntactical. If the problem is in the syntax, it can typically be caught by XSD validation.^This class hosts a node class in the child build process. It uses shared memory to communicate with the local node provider.^Contains information about a logger as a collection of values that can be used to instantiate the logger as well as being serialized to pass between different processes.^Represents a project that can be built using MSBuild.^Wraps exceptions that occur on a different node.^This class is used to generate an MSBuild wrapper project for a solution file or standalone VC project.^Represents a single Target element in an MSBuild project.^Represents a collection of all Target elements in a project.^Represents a Toolset in MSBuild. For more information about Toolsets, see Standard and Custom Toolset Configurations.^Represents one or more Toolset objects. A Toolset is a combination of a Toolset version (such as "2.0"), a tools path, and an optional set of associated properties.^Represents a single UsingTask element in an MSBuild project.^Represents a collection of all UsingTask elements in a project.^Contains utility methods used by MSBuild. This class cannot be inherited.^</value>
  </data>
  <data name="Microsoft.Build.Construction_ClassDescription" xml:space="preserve">
    <value>The location of an XML node in a file.

Any editing of the project XML through the MSBuild API's will invalidate locations in that XML until the XML is reloaded.^Represents the Choose Element (MSBuild) in an MSBuild project.^Abstract base class for MSBuild construction object model elements.^Provides an abstract container class for project elements.^Represents the ProjectExtensions Element (MSBuild) in an MSBuild project. Project extensions can contain arbitrary XML content.^Represents an Import Element (MSBuild) in an MSBuild project.^Represents the ImportGroup element in an MSBuild project.^Represents an ItemDefinition element in an MSBuild project.^Represents an ItemDefinitionGroup Element (MSBuild) in an MSBuild project.^Represents an Item Element (MSBuild) in an MSBuild project.^Represents an ItemGroup Element (MSBuild) in an MSBuild project.^Represents a Metadata element in an MSBuild project.^Represents an OnError Element (MSBuild) in an MSBuild project.^Represents an Otherwise Element (MSBuild) in an MSBuild project.^Represents an Output Element (MSBuild) in an MSBuild project.^Represents a Property element in an MSBuild project.^Represents a PropertyGroup element in an MSBuild project.^Represents an MSBuild project, a targets file, or any other file that conforms to MSBuild project file schema. This class and its related classes allow a complete MSBuild project or targets file to be read and written.^Represents a Target element in an MSBuild project.^Represents a Task Element (MSBuild) in an MSBuild project.^Represents the body of an inline task.^Represents a UsingTask Element (MSBuild) in an MSBuild project. The UsingTask element is used both for inline tasks and precompiled tasks.^Represents a parameter of an inline task.^Represents a When Element (MSBuild) in an MSBuild project.^Represents the ParameterGroup of an inline task.</value>
  </data>
  <data name="Microsoft.Build.Conversion_ClassDescription" xml:space="preserve">
    <value>Converts a Visual Studio project file to the Visual Studio 2010 project file format.</value>
  </data>
  <data name="Microsoft.Build.Debugging_ClassDescription" xml:space="preserve">
    <value>Manager for supporting debugging a state machine.^Executes the islands on a dedicated worker thread. The worker thread's physical callstack then maps to the interpreter's virtual callstack.</value>
  </data>
  <data name="Microsoft.Build.Evaluation_ClassDescription" xml:space="preserve">
    <value>Represents a project with design time semantics. This class can load project files, edit items and properties and build projects.^Event arguments for the ProjectCollectionChanged event.^Encapsulates a set of related projects, their toolsets, a default set of global properties, and the loggers that should be used to build them. A global version of this class acts as the default project collection.^Provides information about what project just got added to the ProjectCollection project collection.^Event arguments for the ProjectCollectionChanged event.^Represents an evaluated design-time project item.^Represents an evaluated item definition for a particular item-type.^Represents evaluated design-time metadata.^Represents an evaluated design-time property.^Event arguments for the ProjectCollectionChanged event.^Represents an aggregation of a set of properties that correspond to a particular sub toolset.^Represent an aggregation of a tools version (eg. "2.0"), tools path, and optional set of associated properties.</value>
  </data>
  <data name="Microsoft.Build.Exceptions_ClassDescription" xml:space="preserve">
    <value>An exception representing the case where the build was aborted by request, as opposed to being unceremoniously shut down due to another kind of error exception.^This exception is used to wrap an unhandled exception from a logger. This exception aborts the build, and it can only be thrown by the MSBuild engine.^This exception is thrown whenever there is a problem with the user's XML project file. The problem might be semantic or syntactical. The latter would be of a type typically caught by XSD validation (if it was performed by the project writer).^Exception subclass that ToolsetReaders should throw.</value>
  </data>
  <data name="Microsoft.Build.Execution_ClassDescription" xml:space="preserve">
    <value>This class is the public entry point for executing builds.^This class represents all of the settings which must be specified to start a build.^Encapsulates all of the data needed to submit a build request.^Represents the current result set for all of the targets that have produced results for a particular configuration.^Represents a build request that has been submitted to the build manager for processing. The methods of this class may be used to execute synchronous or asynchronous build requests and to provide access to the results upon completion.^Implementation of a host service that mediates access from the build to the host.^This class represents an implementation of an out-of-proc build node. This class is deprecated and has no alternative.^Represents a project instance.^Represents an evaluated item definition for a particular item type, divested of all references to project source code.^Wraps an unevaluated itemgroup under a target. Immutable.^Wraps an unevaluated item under an itemgroup in a target. Immutable.^Wraps an unevaluated metadata under an item in an item group in a target. Immutable.^Wraps an evaluated item for build purposes.^Wraps an evaluated metadata for build purposes.^Wraps an OnError Element (MSBuild).^Wraps an unevaluated propertygroup under a target. Immutable.^Wraps an unevaluated property of a property group in a target. Immutable.^Wraps an evaluated property for build purposes. Instances of these properties are added and removed via methods on the ProjectInstance object.^Wraps a Target Element (MSBuild).^Abstracts the ProjectTaskInstance, ProjectPropertyGroupTaskInstance and ProjectItemGroupTaskInstance classes. This allows these types to be used in a single collection of target children^Wraps a Task Element (MSBuild).^Abstracts the base class for the TaskOutputItem and TaskOutputProperty classes. This allows them to be used in a single collection.^Wraps an output item element of a Task Element (MSBuild).^Represents an output property element of a Task Element (MSBuild).^Represents both the result code for building a single target and the overall build result.</value>
  </data>
  <data name="Microsoft.Build.Framework.XamlTypes_ClassDescription" xml:space="preserve">
    <value>Represents an argument to a BaseProperty.^Represents a Rule property.^Represents the schema of a Boolean property.^Represents a category to which a BaseProperty can belong.^The CategorySchema provides a strongly-typed identity handle to the underlying schema data model.^Used to deserialize the content type information^Represents the location and grouping for a BaseProperty.^Represents the schema of an enumeration property.^Represents the schema of an enumeration property.^Represents an admissible value of an EnumProperty.^A simple class that deserializes content type data.^Represent the schema of an integer property.^Used to deserialize the item type information.^Represents a name-value pair. The name cannot be null or empty.^Represents a data-driven XAML script project schema.^Used to represent the schema information for a Tool, a Custom Build Rule, a PropertyPage, and so on.^A container for Rule instances.^The RuleSchema provides a strongly-typed identity handle to the underlying schema data model.^Represents the schema of a list-of-strings property.^Represents the schema of a string property.^Represents a value editor.</value>
  </data>
  <data name="Microsoft.Build.Framework_ClassDescription" xml:space="preserve">
    <value>Provides data for the ErrorRaised event.^Provides data for the AnyEventRaised event.^Provides contextual location information for build events.^Provides data for the BuildFinished event.^Provides data for the MessageRaised event.^Provides data for the BuildStarted event.^Provides data for the StatusEventRaised event.^Provides data for the WarningRaised event.^Contains arguments for critical message events. These always have high importance.^Provides data for the CustomEventRaised event.^Provides data for the CustomEventRaised event.^Provides data for the CustomEventRaised event.^Stores strings for parts of a message delaying the formatting until it needs to be shown.^Defines the metadata attribute that MSBuild uses to identify tasks that must be executed in their own application domains.^Allows a logger to force the build to stop in an explicit way.^Defines the metadata attribute that task authors use to identify task properties that output data from the task.^Provides data for the ProjectFinished event.^Provides data for the ProjectStarted event.^Defines the metadata attribute that task authors use to identify required task properties. Task properties with this attribute must have a set value when the task is run.^Defines the metadata attribute that task authors use to identify whether the task requires a specific version of the CLR runtime.^This attribute is used to mark a task class as explicitly not being required to run in the STA for COM.^This attribute is used to mark a task class as being required to run in a Single Threaded Apartment for COM.^Initializes a new instance of the TargetFinishedEventArgs class.^Provides data for the TargetStarted event.^Provides data for the MessageRaised event.^Provides data for the TaskFinished event.^Represents the parameter information from the using task as a strongly typed class.^Provides data for the TaskStarted event.</value>
  </data>
  <data name="Microsoft.Build.Logging_ClassDescription" xml:space="preserve">
    <value>Represents a logger that forwards events to a central logger (e.g ConsoleLogger) residing on the parent node.^Represents the default logger that outputs event data to the console (stdout).^This class creates a text file which will contain the build log for a node.^A specialization of the ConsoleLogger that logs to a file instead of the console.^Represents a central/forwarding logger pair used in multiprocessor logging.^Contains information about a logger as a collection of values that can be used to instantiate the logger and can be serialized to be passed between different processes.</value>
  </data>
  <data name="Microsoft.Build.Tasks_ClassDescription" xml:space="preserve">
    <value>Implements the AL task. Use the AL element in your project file to create and execute this task. For usage and parameter information, see AL (Assembly Linker) Task.^Provides the same functionality as the Task class, but derives from MarshalByRefObject so that it can be instantiated in its own application domain.^Implements the AspNetCompiler task. Use the AspNetCompiler element in your project file to create and execute this task. For usage and parameter information, see AspNetCompiler Task.^Implements the AssignCulture task. Use the AssignCulture element in your project file to create and execute this task. For usage and parameter information, see AssignCulture Task.^Assigns XML project configurations to project reference task items.^Assigns target paths to input files.^Implements the CallTarget task. Use the CallTarget element in your project file to create and execute this task. For usage and parameter information, see CallTarget Task.^A task factory which can take a code DOM supported language and create a task from it.^Combines the specified paths into a single path.^Comprises extended utility methods for constructing a command line.^Implements the ConvertToAbsolutePath task. Use the ConvertToAbsolutePath element in your project file to create and execute this task. For usage and parameter information, see ConvertToAbsolutePath Task.^Implements the Copy task. Use the Copy element in your project file to create and execute this task. For usage and parameter information, see Copy Task.^Creates a C#-style manifest name from a given resource file name.^Implements the CreateItem task. Use the CreateItem element in your project file to create and execute this task. For usage and parameter information, see CreateItem Task.^Determines the manifest resource name to assign to a resource.^Implements the CreateProperty task. Use the CreateProperty element in your project file to create and execute this task. For usage and parameter information, see CreateProperty Task.^Creates a Visual Basic-style manifest name from a given resource file name.^Implements the Csc task. Use the Csc element in your project file to create and execute this task. For usage and parameter information, see Csc Task.^Implements the Delete task. Use the Delete element in your project file to create and execute this task. For usage and parameter information, see Delete Task.^Implements the Error task. Use the Error element in your project file to create and execute this task. For usage and parameter information, see Delete Task.^Implements the Exec task. Use the Exec element in your project file to create and execute this task. For usage and parameter information, see Exec Task.^Finds the app.config file, if any, in the provided lists.^In a specified list, finds an item that has the matching itemspec.^Implements the FindUnderPath task. Use the FindUnderPath element in your project file to create and execute this task. For usage and parameter information, see FindUnderPath Task.^Converts a URL into a proper URL format.^Appends the revision number to the version number.^Implements the GenerateApplicationManifest task. Use the GenerateApplicationManifest element in the project file to create and execute this task. For usage and parameter information, see GenerateApplicationManifest Task.^Implements the GenerateBootstrapper task. Use the GenerateBootstrapper element in your project file to create and execute this task. For usage and parameter information, see GenerateBootstrapper Task.^Implements the GenerateDeploymentManifest task. Use the GenerateDeploymentManifest element in the project file to create and execute this task. For usage and parameter information, see GenerateDeploymentManifest Task.^Represents the base class for all manifest generation tasks.^Implements the GenerateResource task. Use the GenerateResource element in your project file to create and execute this task. For usage and parameter information, see GenerateResource Task.^Generates the application trust from the base manifest, and from the TargetZone and ExcludedPermissions properties.^Implements the GetAssemblyIdentity task. Use the GetAssemblyIdentity element in your project file to create and execute this task. For usage and parameter information, see GetAssemblyIdentity Task.^Implements the GetFrameworkPath task. Use the GetFrameworkPath element in your project file to create and execute this task. For usage and parameter information, see GetFrameworkPath Task.^Implements the GetFrameworkSdkPath task. Use the GetFrameworkSdkPath element in your project file to create and execute this task. For usage and parameter information, see GetFrameworkSdkPath Task.^Gathers the list of installed SDKS in the registry and on disk and outputs them into the project so they can be used during SDK reference resolution and RAR for single files.

GetInstalledSDKLocations doesn't recognize a version folder if "v" appears in its name. For example, an SDK that's located at C:\Windows\Program Files\Microsoft SDKs\Windows\8.0\SDKFolders\3rdPartySDK\2.5\will be located correctly. However, the same SDK located atC:\Windows\Program Files\Microsoft SDKs\Windows\8.0\SDKFolders\3rdPartySDK\v2.5\won't be located and will be ignored. If an SDK is ignored, the failure won't be recorded in the log, and no error will be thrown.

Version folder names need to be formed as major.minor[.build[.revision]]. For more information, see TryParse(String, Version).

To find an SDK with a particular version, the version sought must match the version requested. For example, if the SDK has a folder version name 8.0.0 and the customer requested the SDK with version 8.0, there is no match, and the SDK won't be found.

For more information on version matching, see CompareTo(Version).^Returns the reference assembly paths to the various frameworks.^Resolves an SDKReference to a full path on disk^Implements the LC task. Use the LC element in your project file to create and execute this task. For usage and parameter information, see LC Task.^Implements the MakeDir task. Use the MakeDir element in your project file to create and execute this task. For usage and parameter information, see MakeDir Task.^Defines the properties and methods common to managed compiler tasks.^Implements the Message task. Use the Message element in your project file to create and execute this task. For usage and parameter information, see Message Task.^Task to move one or more files.^Implements the MSBuild task. Use the MSBuild element in your project file to create and execute this task. For usage and parameter information, see MSBuild Task.^Implements the ReadLinesFromFile task. Use the ReadLinesFromFile element in your project file to create and execute this task. For usage and parameter information, see ReadLinesFromFile Task.^Implements the RegisterAssembly task. Use the RegisterAssembly element in your project file to create and execute this task. For usage and parameter information, see RegisterAssembly Task.^Implements the RemoveDir task. Use the RemoveDir element in your project file to create and execute this task. For usage and parameter information, see RemoveDir Task.^Implements the RemoveDuplicates task. Use the RemoveDuplicates element in your project file to create and execute this task. For usage and parameter information, see RemoveDuplicates Task.^Determines whether the application requires the .NET Framework 3.5 SP1.^Implements the ResolveAssemblyReference task. Use the ResolveAssemblyReference element in your project file to create and execute this task. For usage and parameter information, see ResolveAssemblyReference Task.^Implements the ResolveComReference task. Use the ResolveComReference element in your project file to create and execute this task. For usage and parameter information, see ResolveComReference Task.^Implements the ResolveKeySource task. Use the ResolveKeySource element in your project file to create and execute this task. For usage and parameter information, see ResolveKeySource Task.^This task resolves the following items in the build process to files for manifest generation: built items, dependencies, satellites, content, debug symbols, and documentation) to files for manifest generation.^Implements the ResolveNativeReference task. Use the ResolveNativeReference element in your project file to create and execute this task. For usage and parameter information, see ResolveNativeReference Task.^Determines the output files for non-MSBuild project references.^Represents the base class for ResolveNonMSBuildProjectOutput and AssignProjectConfiguration.^Resolves an SDKReference to a full path on disk.^Implements the SGen task. Use the SGen element in your project file to create and execute this task. For usage and parameter information, see SGen Task.^Implements the SignFile task. Use the SignFile element in your project file to create and execute this task. For usage and parameter information, see SignFile Task.^Contains properties to help extend a task.^Enables logging of various messages. Also, enables loading and formatting of resources.^Comprises extended utility methods for constructing a task that wraps a command line tool.^Implements the Touch task. Use the Touch element in your project file to create and execute this task. For usage and parameter information, see Touch Task.^Implements the UnregisterAssembly task. Use the UnregisterAssembly element in your project file to create and execute this task. For usage and parameter information, see UnregisterAssembly Task.^Updates selected properties in a manifest and resigns.^Implements the Vbc task. Use the Vbc element in your project file to create and execute this task. For usage and parameter information, see Vbc Task.^Implements the Warning task. Use the Warning element in your project file to create and execute this task. For usage and parameter information, see Warning Task.^Exports a managed assembly to a windows runtime metadata.^Generates a temporary code file with the specified generated code fragment. Does not delete the file.^Implements the WriteLinesToFile task. Use the WriteLinesToFile element in your project file to create and execute this task. For usage and parameter information, see WriteLinesToFileWriteLinesToFile Task.^The task factory provider for XAML tasks.^A task that returns values as specified by XPath Query from an XML file.^A task that sets values as specified by XPath Query into a XML file.^Transforms an XML input by using an XSLT or Compiled XSLT and outputs to an output device or a file.</value>
  </data>
  <data name="Microsoft.Build.Tasks.Deployment.Bootstrapper_ClassDescription" xml:space="preserve">
    <value>The top-level object for the bootstrapper system.^Defines messages that occur during the BootstrapperBuilder build operation.^Represents the results of the BootstrapperBuilder build operation.^Defines the settings for the bootstrapper build operation.^Represents a product that the BootstrapperBuilder finds in the Path property.^Represents a buildable version of a Product.^Contains a collection of ProductBuilder objects.^This interface represents a collection of Product objects. The collection is a closed set generated by the BootstrapperBuilder based on the Path property. The client cannot add or remove items from this collection.</value>
  </data>
  <data name="Microsoft.Build.Tasks.Deployment.ManifestUtilities_ClassDescription" xml:space="preserve">
    <value>Provides a unique identifier for a ClickOnce application.^Describes a ClickOnce or native Win32 application manifest.^Specifies the identity of an assembly.^Describes a Win32 assembly manifest.^Describes a manifest assembly reference.^Provides a collection for manifest assembly references.^Describes base functionality common to both file references and assembly references.^Represents a COM class that is described in a manifest.^Describes the versions of the .NET Framework that an application can run on.^Represents a collection of versions of the .NET Framework that an application prefers to run on.^Represents a ClickOnce deployment manifest.^Represents a file name extension to be associated with the application.^Represents a collection of file associations.^Describes a manifest file reference.^Represents a collection for manifest file references.^Represents base functionality common to all supported manifest types.^Reads an XML manifest file into an object representation.^Writes an object representation of a manifest to XML.^This class represents an error, warning, or informational output message for the manifest generator.^This class represent a collection for output messages.^Represents a proxy in a ClickOnce application manifest. .^Provides a set of utility functions for manipulating security permission sets and signing.^This class represents the application security trust information.^Represents a type library.^Represents a window class in an application manifest.</value>
  </data>
  <data name="Microsoft.Build.Tasks.Windows_ClassDescription" xml:space="preserve">
    <value>Implements the FileClassifier task. Use the FileClassifier element in your project file to create and execute this task. For usage and parameter information, see FileClassifier.^Implements the GenerateTemporaryTargetAssembly task. Use the GenerateTemporaryTargetAssembly element in your project file to create and execute this task. For usage and parameter information, see GenerateTemporaryTargetAssembly.^Implements the GetWinFXPath task. Use the GetWinFXPath element in your project file to create and execute this task. For usage and parameter information, see GetWinFXPath.^Implements the MarkupCompilePass1 task. Use the MarkupCompilePass1 element in your project file to create and execute this task. For usage and parameter information, see MarkupCompilePass1.^Implements the MarkupCompilePass2 task. Use the MarkupCompilePass2 element in your project file to create and execute this task. For usage and parameter information, see MarkupCompilePass2.^Implements the MergeLocalizationDirectives task. Use the MergeLocalizationDirectives element in your project file to create and execute this task. For usage and parameter information, see MergeLocalizationDirectives.^Implements the ResourcesGenerator task. Use the ResourcesGenerator element in your project file to create and execute this task. For usage and parameter information, see ResourcesGenerator.^Implements the UidManager task. Use the UidManager element in your project file to create and execute this task. For usage and parameter information, see UidManager.^Implements the UpdateManifestForBrowserApplication task. Use the UpdateManifestForBrowserApplication element in your project file to create and execute this task. For usage and parameter information, see UpdateManifestForBrowserApplication.</value>
  </data>
  <data name="Microsoft.Build.Tasks.Xaml_ClassDescription" xml:space="preserve">
    <value>Specifies attribute data.^Specifies attribute parameter data.^Specifies settings for the build extension context.^Specifies class data settings.^Encapsulations the relations between command line arguments.^Class for generating command lines.^Represents a single command line tool switch.^Represents an MS Build task that verifies that all the types referenced in the original input XAML files are resolved.^An MS Build task that generates a temporary assembly by compiling the source files generated by the PartialClassGenerationTask.^Represents a named object.^Accesses XAML files that define types (with x:Class) and generates the corresponding source code that can be compiled into an assembly.^Specifies property data.^Expresses a relationship between an argument and a property.^Specifies settings for the build type generation extension context.^Specifies information about the XAML build type inspection context.^Represents the tasks generated by the Xaml task factory.</value>
  </data>
  <data name="Microsoft.Build.Utilities_ClassDescription" xml:space="preserve">
    <value>Provides the same functionality as Task, but also derives from MarshalByRefObject so that it can be instantiated in its own app domain.^Contains information about entries in the AssemblyFoldersEx registry keys.^This class is the filetracking log interpreter for .read. tracking logs in canonical form or those that have been rooted (Circumflex) to make them canonical.^This class is the file tracking log interpreter for .write. tracking logs in canonical form Canonical .write. logs need to be rooted, since the outputs need to be associated with an input.^Comprises utility methods for constructing a command line.^This class contains utility functions to encapsulate launching and logging for the Tracker^This class is used to track file dependencies during a build.^When overridden in a derived form, provides functionality for loggers that handle events raised by the MSBuild engine.^Represents a multiplexing logger. The purpose of this logger is to register and unregister multiple loggers during the build. Supports the Visual Studio IDE scenario in which loggers are registered and unregistered for each project system's build request. One physical build can have multiple logical builds, each with its own set of loggers.

The MuxLogger registers itself with the build manager as a regular central /l style logger. It receives messages from the build manager and routes them to the correct logger, based on the logical build that the message came from.^Determines the correct tool in the Toolset that MSBuild should use, based on the current system's processor architecture.^Represents a target platform SDK.^When overridden in a derived form, provides functionality for tasks.^Defines a single item of the project as it is passed into a task.^Provides helper logging methods used by tasks.^Provides utility methods for locating .NET Framework and .NET Framework SDK files and directories.^When overridden in a derived form, provides functionality for a task that wraps a command line tool.^This class contains utility functions to assist with tracking dependencies.</value>
  </data>
</root>
