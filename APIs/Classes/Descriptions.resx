<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Accessibility_ClassDescription" xml:space="preserve">
    <value>The CAccPropServicesClass and all of its exposed members are part of a managed wrapper for the Component Object Model (COM) IAccPropServices interface.</value>
  </data>
  <data name="Microsoft.Activities.Build.Debugger_ClassDescription" xml:space="preserve">
    <value>Build Extension for Workflow debugger support.</value>
  </data>
  <data name="Microsoft.Activities.Build.Expressions_ClassDescription" xml:space="preserve">
    <value>Specifies information about the expressions build extension.</value>
  </data>
  <data name="Microsoft.Activities.Build.Validation_ClassDescription" xml:space="preserve">
    <value>Represents a task for deferring validation.^Represents a task that reports any deferred validation errors.</value>
  </data>
  <data name="Microsoft.Activities.Build_ClassDescription" xml:space="preserve">
    <value>Specifies information about the workflow build message task.</value>
  </data>
  <data name="Microsoft.Build.BuildEngine_ClassDescription" xml:space="preserve">
    <value>Represents a single item in an MSBuild project.^Represents a collection of BuildItem objects.^Represents a collection of BuildItemGroup objects.^Represents a single property in an MSBuild project.^Represents a collection of BuildProperty objects.^Represents a collection of BuildPropertyGroup objects.^Represents a Task element in a project.^Represents the ConfigurableForwardingLogger, a pre-fabricated forwarding logger to be used when building projects on a multi-proc or multi-core system. For more information, see Writing Multi-Processor-Aware Loggers.^Implements the standard console logger that outputs event data to the console window during a build.^Represents a text file that contains the build log for a build node.^Represents the MSBuild engine.^Extends the ConsoleLogger to log messages to a file rather than the console window.^Represents a single Import element in an MSBuild project.^Represents a collection of all Import elements in a project.^This exception is used to wrap an unhandled exception from a logger.^This exception is thrown whenever there is a problem with the user's XML project file. The problem might be semantic or syntactical. If the problem is in the syntax, it can typically be caught by XSD validation.^This exception is thrown whenever there is a problem with the user's custom toolset definition file. The problem might be semantic or syntactical. If the problem is in the syntax, it can typically be caught by XSD validation.^This class hosts a node class in the child build process. It uses shared memory to communicate with the local node provider.^Contains information about a logger as a collection of values that can be used to instantiate the logger as well as being serialized to pass between different processes.^Represents a project that can be built using MSBuild.^Wraps exceptions that occur on a different node.^This class is used to generate an MSBuild wrapper project for a solution file or standalone VC project.^Represents a single Target element in an MSBuild project.^Represents a collection of all Target elements in a project.^Represents a Toolset in MSBuild. For more information about Toolsets, see Standard and Custom Toolset Configurations.^Represents one or more Toolset objects. A Toolset is a combination of a Toolset version (such as "2.0"), a tools path, and an optional set of associated properties.^Represents a single UsingTask element in an MSBuild project.^Represents a collection of all UsingTask elements in a project.^Contains utility methods used by MSBuild. This class cannot be inherited.^</value>
  </data>
  <data name="Microsoft.Build.Construction_ClassDescription" xml:space="preserve">
    <value>The location of an XML node in a file.

Any editing of the project XML through the MSBuild API's will invalidate locations in that XML until the XML is reloaded.^Represents the Choose Element (MSBuild) in an MSBuild project.^Abstract base class for MSBuild construction object model elements.^Provides an abstract container class for project elements.^Represents the ProjectExtensions Element (MSBuild) in an MSBuild project. Project extensions can contain arbitrary XML content.^Represents an Import Element (MSBuild) in an MSBuild project.^Represents the ImportGroup element in an MSBuild project.^Represents an ItemDefinition element in an MSBuild project.^Represents an ItemDefinitionGroup Element (MSBuild) in an MSBuild project.^Represents an Item Element (MSBuild) in an MSBuild project.^Represents an ItemGroup Element (MSBuild) in an MSBuild project.^Represents a Metadata element in an MSBuild project.^Represents an OnError Element (MSBuild) in an MSBuild project.^Represents an Otherwise Element (MSBuild) in an MSBuild project.^Represents an Output Element (MSBuild) in an MSBuild project.^Represents a Property element in an MSBuild project.^Represents a PropertyGroup element in an MSBuild project.^Represents an MSBuild project, a targets file, or any other file that conforms to MSBuild project file schema. This class and its related classes allow a complete MSBuild project or targets file to be read and written.^Represents a Target element in an MSBuild project.^Represents a Task Element (MSBuild) in an MSBuild project.^Represents the body of an inline task.^Represents a UsingTask Element (MSBuild) in an MSBuild project. The UsingTask element is used both for inline tasks and precompiled tasks.^Represents a parameter of an inline task.^Represents a When Element (MSBuild) in an MSBuild project.^Represents the ParameterGroup of an inline task.</value>
  </data>
  <data name="Microsoft.Build.Conversion_ClassDescription" xml:space="preserve">
    <value>Converts a Visual Studio project file to the Visual Studio 2010 project file format.</value>
  </data>
  <data name="Microsoft.Build.Debugging_ClassDescription" xml:space="preserve">
    <value>Manager for supporting debugging a state machine.^Executes the islands on a dedicated worker thread. The worker thread's physical callstack then maps to the interpreter's virtual callstack.</value>
  </data>
  <data name="Microsoft.Build.Evaluation_ClassDescription" xml:space="preserve">
    <value>Represents a project with design time semantics. This class can load project files, edit items and properties and build projects.^Event arguments for the ProjectCollectionChanged event.^Encapsulates a set of related projects, their toolsets, a default set of global properties, and the loggers that should be used to build them. A global version of this class acts as the default project collection.^Provides information about what project just got added to the ProjectCollection project collection.^Event arguments for the ProjectCollectionChanged event.^Represents an evaluated design-time project item.^Represents an evaluated item definition for a particular item-type.^Represents evaluated design-time metadata.^Represents an evaluated design-time property.^Event arguments for the ProjectCollectionChanged event.^Represents an aggregation of a set of properties that correspond to a particular sub toolset.^Represent an aggregation of a tools version (eg. "2.0"), tools path, and optional set of associated properties.</value>
  </data>
  <data name="Microsoft.Build.Exceptions_ClassDescription" xml:space="preserve">
    <value>An exception representing the case where the build was aborted by request, as opposed to being unceremoniously shut down due to another kind of error exception.^This exception is used to wrap an unhandled exception from a logger. This exception aborts the build, and it can only be thrown by the MSBuild engine.^This exception is thrown whenever there is a problem with the user's XML project file. The problem might be semantic or syntactical. The latter would be of a type typically caught by XSD validation (if it was performed by the project writer).^Exception subclass that ToolsetReaders should throw.</value>
  </data>
  <data name="Microsoft.Build.Execution_ClassDescription" xml:space="preserve">
    <value>This class is the public entry point for executing builds.^This class represents all of the settings which must be specified to start a build.^Encapsulates all of the data needed to submit a build request.^Represents the current result set for all of the targets that have produced results for a particular configuration.^Represents a build request that has been submitted to the build manager for processing. The methods of this class may be used to execute synchronous or asynchronous build requests and to provide access to the results upon completion.^Implementation of a host service that mediates access from the build to the host.^This class represents an implementation of an out-of-proc build node. This class is deprecated and has no alternative.^Represents a project instance.^Represents an evaluated item definition for a particular item type, divested of all references to project source code.^Wraps an unevaluated itemgroup under a target. Immutable.^Wraps an unevaluated item under an itemgroup in a target. Immutable.^Wraps an unevaluated metadata under an item in an item group in a target. Immutable.^Wraps an evaluated item for build purposes.^Wraps an evaluated metadata for build purposes.^Wraps an OnError Element (MSBuild).^Wraps an unevaluated propertygroup under a target. Immutable.^Wraps an unevaluated property of a property group in a target. Immutable.^Wraps an evaluated property for build purposes. Instances of these properties are added and removed via methods on the ProjectInstance object.^Wraps a Target Element (MSBuild).^Abstracts the ProjectTaskInstance, ProjectPropertyGroupTaskInstance and ProjectItemGroupTaskInstance classes. This allows these types to be used in a single collection of target children^Wraps a Task Element (MSBuild).^Abstracts the base class for the TaskOutputItem and TaskOutputProperty classes. This allows them to be used in a single collection.^Wraps an output item element of a Task Element (MSBuild).^Represents an output property element of a Task Element (MSBuild).^Represents both the result code for building a single target and the overall build result.</value>
  </data>
</root>
