<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Accessibility_EnumDescription" xml:space="preserve">
    <value>The AnnoScope and all of its exposed members are part of a managed wrapper for the Component Object Model (COM) accessibility interface.</value>
  </data>
  <data name="Microsoft.Build.BuildEngine_EnumDescription" xml:space="preserve">
    <value>Specifies the settings for a build.^Defines how MSBuild loads a project.^Specifies constants that define the location in the project to insert a property.^An enumeration whose values control Toolset initialization.</value>
  </data>
  <data name="Microsoft.Build.Evaluation_EnumDescription" xml:space="preserve">
    <value>Properties or other mutable state associated with a ProjectCollection project collection.^Flags for controlling the project load.^Flags for controlling the toolset initialization.</value>
  </data>
  <data name="Microsoft.Build.Execution_EnumDescription" xml:space="preserve">
    <value>Flags providing additional control over the build request.^Enumerated data indicating the build result of a target or a build request.^An enumerated data type that determines where projects are built.^Reasons for a node to shutdown.^Contains settings for controlling project instance creation.^The result code for a given target.</value>
  </data>
  <data name="Microsoft.Build.Framework.XamlTypes_EnumDescription" xml:space="preserve">
    <value>Determines whether the default value for a property is set at the bottom or the top of the project file.^Describes a subsequent definition for a rule with the same name.</value>
  </data>
  <data name="Microsoft.Build.Framework_EnumDescription" xml:space="preserve">
    <value>Specifies the available verbosity levels of a Logger.^Specifies constants that define the importance of a build message.^Defines the lifetime of a registered task object.</value>
  </data>
  <data name="Microsoft.Build.Tasks.Deployment.Bootstrapper_EnumDescription" xml:space="preserve">
    <value>This enumeration provides three levels of importance for build messages.^Specifies the way that required components will be published.</value>
  </data>
  <data name="Microsoft.Build.Tasks.Deployment.ManifestUtilities_EnumDescription" xml:space="preserve">
    <value>This class represents the attributes that the GetFullName(AssemblyIdentity+FullNameFlags) function returns.^This class represents the type of an assembly reference.^Specifies the type of output message as either an error, warning, or informational.^Specifies how the application checks for updates.^Specifies the units for the update interval.</value>
  </data>
  <data name="Microsoft.Build.Tasks.Xaml_EnumDescription" xml:space="preserve">
    <value>Enumerates the types for command line switches.^Specifies the member visibility options.</value>
  </data>
  <data name="Microsoft.Build.Utilities_EnumDescription" xml:space="preserve">
    <value>Used to specify the targeted bitness of the .NET Framework for some methods of ToolLocationHelper.^Enumeration to express the type of executable being wrapped by Tracker.exe.^Defines the next action for ToolTask after an attempt to initialize the host object.^Specifies the version of the .NET Framework to use with the methods in ToolLocationHelper.^The possible types of up to date check that we can support.^Used to specify the version of Visual Studio from which to select associated tools for some methods of ToolLocationHelper.</value>
  </data>
</root>
